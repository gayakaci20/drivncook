// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Énumérations

enum UserRole {
  ADMIN
  FRANCHISEE
}

enum FranchiseStatus {
  PENDING
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum VehicleStatus {
  AVAILABLE
  ASSIGNED
  MAINTENANCE
  OUT_OF_SERVICE
}

enum OrderStatus {
  DRAFT
  PAID
  PENDING
  CONFIRMED
  IN_PREPARATION
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PurchaseType {
  PURCHASE
  RETURN
}

enum NotificationType {
  ORDER_CREATED
  ORDER_CONFIRMED
  ORDER_SHIPPED
  ORDER_DELIVERED
  ORDER_CANCELLED
  ORDER_OVERDUE
  VEHICLE_MAINTENANCE_DUE
  VEHICLE_INSPECTION_DUE
  VEHICLE_ASSIGNED
  VEHICLE_BREAKDOWN
  INVOICE_GENERATED
  INVOICE_OVERDUE
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  FRANCHISE_APPROVED
  STOCK_LOW
  SALES_TARGET_ACHIEVED
  SALES_TARGET_MISSED
  USER_REGISTERED
  DOCUMENT_TRANSMITTED
  SYSTEM
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationStatus {
  UNREAD
  READ
}

// Modèles

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?  // Mot de passe hashé
  firstName   String
  lastName    String
  phone       String?
  role        UserRole @default(FRANCHISEE)
  franchiseId String?  // ID de la franchise associée
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  franchise          Franchise?
  createdOrders      Order[]       @relation("CreatedByUser")
  updatedOrders      Order[]       @relation("UpdatedByUser")
  maintenanceCreated Maintenance[] @relation("CreatedByUser")
  salesReports       SalesReport[]
  auditLogs          AuditLog[]

  name          String?
  emailVerified Boolean @default(false)
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Franchise {
  id                String          @id @default(cuid())
  businessName      String
  siretNumber       String          @unique
  vatNumber         String?
  address           String
  city              String
  postalCode        String
  region            String
  contactEmail      String
  contactPhone      String
  personalPhone     String? // Téléphone personnel du franchisé
  personalEmail     String? // Email personnel du franchisé
  kbisDocument      String? // Chemin vers le document KBIS
  idCardDocument    String? // Chemin vers la carte d'identité
  drivingLicense    String? // Numéro de permis de conduire
  status            FranchiseStatus @default(PENDING)
  entryFee          Decimal         @default(50000.00)
  entryFeePaid      Boolean         @default(false)
  entryFeeDate      DateTime?
  royaltyRate       Decimal         @default(4.00) // 4%
  contractStartDate DateTime?
  contractEndDate   DateTime?
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  userId          String                     @unique
  user            User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicles        Vehicle[]
  orders          Order[]
  salesReports    SalesReport[]
  invoices        Invoice[]
  purchaseHistory FranchisePurchaseHistory[]
  clientPurchases ClientPurchase[]

  @@map("franchises")
}

model Warehouse {
  id         String   @id @default(cuid())
  name       String
  address    String
  city       String
  postalCode String
  region     String
  phone      String?
  email      String?
  advisor    String? // Conseiller de l'entrepôt
  capacity   Int // Capacité de stockage
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  stocks     Stock[]
  orderItems OrderItem[]

  @@map("warehouses")
}

model ProductCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("product_categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  title       String? // Titre de l'article (différent du nom)
  description String?
  sku         String   @unique
  barcode     String?
  unitPrice   Decimal // Prix hors taxe
  unit        String // kg, litre, pièce, etc.
  minStock    Int      @default(0)
  maxStock    Int?
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categoryId               String
  category                 ProductCategory            @relation(fields: [categoryId], references: [id])
  stocks                   Stock[]
  orderItems               OrderItem[]
  franchisePurchaseHistory FranchisePurchaseHistory[]
  clientPurchases          ClientPurchase[]

  @@map("products")
}

model Stock {
  id              String    @id @default(cuid())
  quantity        Int
  reservedQty     Int       @default(0)
  lastRestockDate DateTime?
  expirationDate  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([productId, warehouseId])
  @@map("stocks")
}

model Vehicle {
  id                 String        @id @default(cuid())
  licensePlate       String        @unique
  brand              String // Marque
  model              String // Modèle
  year               Int // Age camion
  vin                String        @unique
  status             VehicleStatus @default(AVAILABLE)
  purchaseDate       DateTime
  purchasePrice      Decimal
  currentMileage     Int?
  lastRevisionDate   DateTime? // Date dernière révision
  revisionInterval   Int? // Délais de révision (en jours)
  nextRevisionDate   DateTime? // Prochaine révision calculée
  lastInspectionDate DateTime? // CTRL technique
  nextInspectionDate DateTime? // Prochain CTRL technique
  insuranceNumber    String?
  insuranceExpiry    DateTime?
  assignmentDate     DateTime? // Date rattachement à la franchise
  latitude           Float?
  longitude          Float?
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  // Relations
  franchiseId  String? // ID rattachement client
  franchise    Franchise?    @relation(fields: [franchiseId], references: [id])
  maintenances Maintenance[]

  @@map("vehicles")
}

model Maintenance {
  id                  String            @id @default(cuid())
  type                MaintenanceType
  status              MaintenanceStatus @default(SCHEDULED)
  title               String
  description         String?
  scheduledDate       DateTime
  completedDate       DateTime?
  cost                Decimal?
  mileage             Int?
  parts               String? // JSON des pièces utilisées
  laborHours          Decimal?
  notes               String?
  nextMaintenanceDate DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  vehicleId   String
  vehicle     Vehicle @relation(fields: [vehicleId], references: [id])
  createdById String
  createdBy   User    @relation("CreatedByUser", fields: [createdById], references: [id])

  @@map("maintenances")
}

model Order {
  id                        String      @id @default(cuid())
  orderNumber               String      @unique
  status                    OrderStatus @default(DRAFT)
  orderDate                 DateTime    @default(now())
  requestedDeliveryDate     DateTime?
  actualDeliveryDate        DateTime?
  totalAmount               Decimal     @default(0)
  notes                     String?
  isFromDrivnCook           Boolean     @default(true) // true = 80%, false = 20%
  transmittedAttachmentUrls String?     // JSON array of attachment URLs
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  // Relations
  franchiseId String
  franchise   Franchise   @relation(fields: [franchiseId], references: [id])
  createdById String
  createdBy   User        @relation("CreatedByUser", fields: [createdById], references: [id])
  updatedById String?
  updatedBy   User?       @relation("UpdatedByUser", fields: [updatedById], references: [id])
  orderItems  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  quantity   Int
  unitPrice  Decimal
  totalPrice Decimal
  notes      String?

  // Relations
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  @@map("order_items")
}

model SalesReport {
  id               String        @id @default(cuid())
  reportDate       DateTime
  dailySales       Decimal
  transactionCount Int           @default(0)
  averageTicket    Decimal       @default(0)
  location         String?
  notes            String?
  royaltyAmount    Decimal       @default(0) // 4% du CA
  paymentStatus    PaymentStatus @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  franchiseId String
  franchise   Franchise @relation(fields: [franchiseId], references: [id])
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])

  @@unique([franchiseId, reportDate])
  @@map("sales_reports")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  amount        Decimal
  description   String
  paymentStatus PaymentStatus @default(PENDING)
  paidDate      DateTime?
  pdfPath       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  franchiseId String
  franchise   Franchise @relation(fields: [franchiseId], references: [id])

  @@map("invoices")
}

// Historique des achats des franchises

model FranchisePurchaseHistory {
  id             String       @id @default(cuid())
  quantity       Int // QTE
  purchasePrice  Decimal // PRIX ACHAT
  salePrice      Decimal // PRIX REVENTE
  purchaseDate   DateTime     @default(now()) // DATE ACHAT
  purchaseType   PurchaseType @default(PURCHASE) // TYPE ACHAT : ACHAT / RETOUR
  expirationDate DateTime? // DATE EXPIRATION
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  franchiseId String // ID CLIENT
  franchise   Franchise @relation(fields: [franchiseId], references: [id])
  productId   String // ID ARTICLE
  product     Product   @relation(fields: [productId], references: [id])

  @@map("franchise_purchase_history")
}

// Base de données des achats clients (front office)

model ClientPurchase {
  id           String   @id @default(cuid())
  quantity     Int // QTE
  price        Decimal // PRIX
  purchaseDate DateTime @default(now()) // DATE ACHAT
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  franchiseId String // Franchise qui a vendu
  franchise   Franchise @relation(fields: [franchiseId], references: [id])
  productId   String // ID ARTICLE
  product     Product   @relation(fields: [productId], references: [id])

  @@map("client_purchases")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String // CREATE, UPDATE, DELETE
  tableName String
  recordId  String
  oldValues String? // JSON
  newValues String? // JSON
  createdAt DateTime @default(now())

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Notification {
  id                 String             @id @default(cuid())
  type               NotificationType
  priority           NotificationPriority @default(MEDIUM)
  status             NotificationStatus   @default(UNREAD)
  title              String
  message            String
  data               String? // JSON data
  createdAt          DateTime             @default(now())
  readAt             DateTime?
  targetUserId       String?
  targetRole         String? // ADMIN or FRANCHISEE
  franchiseId        String?
  relatedEntityId    String?
  relatedEntityType  String?
  actionUrl          String?
  expiresAt          DateTime?

  @@map("notifications")
}
