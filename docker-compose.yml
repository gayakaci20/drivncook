services:
  # Application web
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: drivncook-web
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://drivncook:drivncook_password@postgres:5432/drivncook}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-default-secret-change-in-production}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - UPLOADTHING_SECRET=${UPLOADTHING_SECRET}
      - UPLOADTHING_APP_ID=${UPLOADTHING_APP_ID}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
    volumes:
      - ./uploads:/app/public/uploads
    networks:
      - drivncook-network
    depends_on:
      - postgres
      - database-init
    ports:
      - "3000:3000"

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: drivncook-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-drivncook}
      - POSTGRES_USER=${POSTGRES_USER:-drivncook}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-drivncook_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - drivncook-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-drivncook} -d ${POSTGRES_DB:-drivncook}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service d'initialisation de la base de données
  database-init:
    image: node:20-alpine
    container_name: drivncook-db-init
    working_dir: /app
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://drivncook:drivncook_password@postgres:5432/drivncook}
    volumes:
      - .:/app
    command: >
      sh -c "
        npm install &&
        npx prisma generate &&
        npx prisma migrate deploy
      "
    networks:
      - drivncook-network
    depends_on:
      postgres:
        condition: service_healthy

  # Serveur web (nginx)
  nginx:
    image: nginx:alpine
    container_name: drivncook-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/letsencrypt:ro
      - ./certbot:/var/www/certbot:ro
    depends_on:
      - web
    networks:
      - drivncook-network

  # Certbot pour SSL
  certbot:
    image: certbot/certbot
    container_name: drivncook-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./certbot:/var/www/certbot
    command: echo "Skipping..."
    networks:
      - drivncook-network

  redis:
      image: redis:7-alpine
      container_name: drivncook-redis
      restart: unless-stopped
      command: redis-server --save 20 1 --loglevel warning
      volumes:
        - redis-data:/data
      networks:
        - drivncook-network
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 3

networks:
  drivncook-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local

